1.      Write a MongoDB query to create an INVOICE database and collections (CUSTOMER, PRODUCT) and its corresponding documents.



invoice> use INVOICE;
switched to db INVOICE




INVOICE> db.CUSTOMER.insert({cid:'1001',cname:"Anjana",city:"Clt",phno:"7012577731"})
DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe26b95517ba78d2ef634b') }
}


INVOICE> db.CUSTOMER.insert({cid:'1002',cname:"Sharan",city:"Ktym",phno:"9496727674"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe27245517ba78d2ef634c') }
}
INVOICE> db.CUSTOMER.insert({cid:'1003',cname:"Hari",city:"Tvm",phno:"9458794623"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe27425517ba78d2ef634d') }
}
INVOICE> db.CUSTOMER.insert({cid:'1004',cname:"Neena",city:"Ekm",phno:"9145789632"})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe27605517ba78d2ef634e') }
}






INVOICE> db.PRODUCT.insert({pid:101,pname:"Soap",price:60})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe28195517ba78d2ef634f') }
}
INVOICE> db.PRODUCT.insert({pid:102,pname:"Surf Excel",price:100})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe282d5517ba78d2ef6350') }
}
INVOICE> db.PRODUCT.insert({pid:103,pname:"Eracer",price:5})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe283c5517ba78d2ef6351') }
}
INVOICE> db.PRODUCT.insert({pid:104,pname:"Bedsheet",price:180})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67fe28545517ba78d2ef6352') }
}




2.      Write a MongoDB query to find all documents from the collection CUSTOMER 




INVOICE> db.CUSTOMER.find()
[
  {
    _id: ObjectId('67fe26b95517ba78d2ef634b'),
    cid: '1001',
    cname: 'Anjana',
    city: 'Clt',
    phno: '7012577731'
  },
  {
    _id: ObjectId('67fe27245517ba78d2ef634c'),
    cid: '1002',
    cname: 'Sharan',
    city: 'Ktym',
    phno: '9496727674'
  },
  {
    _id: ObjectId('67fe27425517ba78d2ef634d'),
    cid: '1003',
    cname: 'Hari',
    city: 'Tvm',
    phno: '9458794623'
  },
  {
    _id: ObjectId('67fe27605517ba78d2ef634e'),
    cid: '1004',
    cname: 'Neena',
    city: 'Ekm',
    phno: '9145789632'
  }
]




3.      Write a MongoDB query to update the city in the collection CUSTOMER.



INVOICE> db.CUSTOMER.update({cid:'1001'},{$set:{city:'Banglore'}})


DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}




4.      Write a MongoDB query to delete the first matched document whose city is “Calicut”.



INVOICE> db.CUSTOMER.deleteOne({ city: "Tvm" })
{ acknowledged: true, deletedCount: 1 }

//VERIFIED
